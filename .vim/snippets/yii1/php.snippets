# in .myproject/.lvimrc pune
#
# if ! exists('yii1_snippets_loaded')
#     let yii1_snippets_loaded = 1
#     call ExtractSnipsFile(split(&rtp, ',')[0]. '/snippets/yii1/php.snippets', 'php')  
# endif

##########
# YII
##########

#yii.app
snippet ya
	Yii::app()${1}
snippet y$
	Yii::$app->${1}
snippet ydb db
	Yii::app()->db${1}
snippet ydb createCommand
	Yii::app()->db->createCommand('${1}')
snippet ydb join
	->join(${1:Model}::model()->tableName(). ' AS ${2:alias}', '$2.${3:id} = ${4:alias.camp}')
snippet ydb leftJoin
	->leftJoin(${1:Model}::model()->tableName(). ' AS ${2:alias}', '$2.${3:id} = ${4:alias.camp}')
snippet ydb where
	->where('${1:alias}.${2:camp} = :${3:value_placeholder}', [':$3' => ${4:value}])
snippet ydb andWhere
	->andWhere('${1:alias}.${2:camp} = :${3:value_placeholder}', [':$3' => ${4:value}])
snippet yapp
	Yii::app()${1}
snippet yass
	Yii::app()->getAssetManager()${1}
snippet ypoa
	Yii::getPathOfAlias(${1})
snippet yt
	t('${1}')
#yii.trace
snippet ytr Yii::trace
	Yii::trace(${1:message}, ${2:'category'});${3}
#
snippet ytrd Yii::trace('message', 'debug');
	Yii::trace('${1:message}', 'debug');${2}
snippet ytrd Yii::trace(print_r($var, true), 'debug');
	Yii::trace('$$1 = '. print_r($${1:var}, true), 'debug');${2}
snippet ytrd Yii::trace(POST+GET+COOKIE+SESSION+FILES+SERVER+php::input, 'debug');
	Yii::trace(print_r(['POST' => (isset($_POST) ? $_POST : []), 'GET' => (isset($_GET) ? $_GET : []), 'COOKIE' => (isset($_COOKIE) ? $_COOKIE : []), 'SESSION' => (isset($_SESSION) ? $_SESSION : []), 'FILES' => (isset($_FILES) ? $_FILES : []), 'SERVER' => (isset($_SERVER) ? $_SERVER : []), 'php://input' => @file_get_contents('php://input'),], true), 'debug');${2}
#

#yii.log
snippet ylog trace
	Yii::log(${1:message}, CLogger::LEVEL_TRACE, '${2:application}');${3}
snippet ylog warning
	Yii::log(${1:message}, CLogger::LEVEL_WARNING, '${2:application}');${3}
snippet ylog error
	Yii::log(${1:message}, CLogger::LEVEL_ERROR, '${2:application}');${3}
snippet ylog info
	Yii::log(${1:message}, CLogger::LEVEL_INFO, '${2:application}');${3}
snippet ylog profile
	Yii::log(${1:message}, CLogger::LEVEL_PROFILE, '${2:application}');${3}
#

#yii.request
snippet yreq Yii::app()->request
	Yii::app()->request${1}
#

#yii.request.post
snippet yreq Yii::app()->request->getPost()
	Yii::app()->request->getPost(${1})${2}
#

#yii.request.param
snippet yreq Yii::app()->request->getParam()
	Yii::app()->request->getParam(${1})${2}
#

#yii.request.query
snippet yreq Yii::app()->request->getQuery()
	Yii::app()->request->getQuery(${1})${2}
#

#yii.request.ip
snippet yreq Yii::app()->request->getUserHostAddress()
	Yii::app()->request->getUserHostAddress()${1}
#

snippet yreq Yii::app()->request->cookies[]
	Yii::app()->request->cookies['${1}']
#

snippet yreq Yii::app()->request->getIsPostRequest
	Yii::app()->request->getIsPostRequest()
#
snippet yfbpk
	findByPk(${1|pk})
#
snippet ymfbpk
	model()->findByPk(${1|pk})
#

#yii.findByAttributes
snippet yfba
	findByAttributes(['${1:key}' => ${2:value}])${3}
#
snippet ymfba
	model()->findByAttributes(['${1:key}' => ${2:value}])${3}
#

snippet yp
	Yii::app()->params['${1}']${2}
#

snippet yflash setFlash
	Yii::app()->user->setFlash('success', ${1});${2}
#

snippet yflash addFlash
	Yii::app()->user->addFlash('success',${1});${2}
#

snippet ystate setState
	Yii::app()->user->setState('${1}', ${2});
#

snippet ystate getState
	Yii::app()->user->getState('${1}');
#

snippet ycache Yii::app()->cache->get
	Yii::app()->cache->get('${1:key}');
#

snippet ycache Yii::app()->cache->set
	Yii::app()->cache->set('${1:key}', ${2:data}, ${3:3600});
#

snippet yprof
	Yii::beginProfile('${1:}');${2}
	Yii::endProfile('$1');
#

snippet yexit
	Yii::app()->end();${1}
#

snippet yend
	Yii::app()->end();${1}
#

snippet yus
	Yii::app()->user${1}
#

snippet yuser
	Yii::app()->user${1}
#

snippet yacc
	Yii::app()->user->account${1}
#

snippet yscript
	<script>
	<?php ob_start();?>
	${1://script here}
	<?php csScript(ob_get_clean(), 'ready'); ?>
	</script>
#

snippet ytransaction simple
	// <transaction>
	try {
		$transaction = Yii::app()->db->getCurrentTransaction() ? null : Yii::app()->db->beginTransaction();

		${1}

		if ($transaction) {
			$transaction->commit();
		}

	} catch (Exception $e) {
		if ($transaction) {
			$transaction->rollback();
		}

		throw $e;
	}
	// </transaction>
#
snippet ytransaction retry
	$maxStrikes = 10;
	$strike     = 0;
	while ($strike < $maxStrikes) {
		$strike++;

		try {
			$transaction = Yii::app()->db->getCurrentTransaction() ? null : Yii::app()->db->beginTransaction();

			if ($transaction) {
				$transaction->commit();
			}

			break;

		// deadlock check
		} catch (CDbException $exception) {
			if ($transaction) {
				$transaction->rollback();

				if (isDeadlock($exception) && $strike < $maxStrikes) {
					usleep($strike * 100000);
					continue;
				}
			}

			throw $e;

		} catch (Exception $e) {
			if ($transaction) {
				$transaction->rollback();
			}

			throw $e;
		}
	}
#
snippet ytransaction Yii::app()->db->runInTransaction
	Yii::app()->db->runInTransaction(function ($params) {
		$db = Yii::app()->db;
		$sql = 'UPDATE ...';
		$db->createCommand($sql)->execute();
	}, [$params], 10);
#

snippet yform yii form definition
	$model = new DemoModel();

	// instanțiat Form în loc de CForm
	$form = new Form([
		'id' => 'theForm',

		'elements' => [
			'var' => ['type' => 'text',],
			'var' => ['type' => 'dropdownlist',],
		],

		'buttons' => [
			'submit' => [
				'type'  => 'htmlSubmit',
				'label' => 'Trimite',
			]
		],
	], $model);

	if ($form->submitted()) {
		$form->loadData();
		$form->validate();
	}

	$this->renderPartial('index', [
		'form' => $form,
	]);
#

snippet yform yii from html
	<div id="<?php echo $formContainerId = uniqid('FormContainer'); ?>" class="form">
	<?php echo $form->renderBegin(); ?>
	<?php $formWidget = $form->activeFormWidget; ?>
		<?php
		echo Html::errorSummary($form->model, null, null, ['class' => 'alert alert-danger']);
		echo Html::flashMessages();
		?>
		${2}
		<div>
		<?php
		$form->buttons['${1:submit}']->class = 'btn btn-primary';
		echo $form->buttons['$1']->render();
		?>
		</div>
	<?php echo $form->renderEnd(); ?>
	</div>

	<script>
	<?php ob_start();?>
	ajaxFormInit(<?php echo CJavaScript::encode([
		'formContainerId'    => $formContainerId,
		'modelClass'         => get_class($form->model),
		'multiSubmitButtons' => true,
		'onSuccess'          => new JavaScriptFunction(['form', 'data'], '
			// console.log("form submit OK.");
		')
	]); ?>);
	<?php csScript(ob_get_clean(), 'ready'); ?>
	</script>
#

snippet yform yii form input hidden
	<?php echo $formWidget->hiddenField($form->model, '${1:attribute}'); ?>
#

snippet yform yii form input textfield
	<div class="form-group <?php if ($form->model->hasErrors('${1:attribute}')) { echo 'has-error'; } ?>">
		<?php echo $formWidget->labelEx($form->model, '$1', ['class' => 'control-label']); ?>
		<?php echo $formWidget->textField($form->model, '$1', [
			'class' => 'form-control',
			'placeholder' => '${2:field placeholder}'
		]); ?>
		<div class="help-block">
			<?php echo $formWidget->error($form->model, '$1', ['class' => 'text text-danger']); ?>
		</div>
	</div>
#

snippet yform yii form input textarea
	<div class="form-group <?php if ($form->model->hasErrors('${1:attribute}')) { echo 'has-error'; } ?>">
		<?php echo $formWidget->labelEx($form->model, '$1', ['class' => 'control-label']); ?>
		<?php echo $formWidget->textArea($form->model, '$1', [
			'class' => 'form-control',
			'placeholder' => '${2:field placeholder}',
			'rows' => ${2:5},
			'cols' => ${3:50},
		]); ?>
		<div class="help-block">
			<?php echo $formWidget->error($form->model, '$1', ['class' => 'text text-danger']); ?>
		</div>
	</div>
#

snippet yform yii form input checkbox
	<div class="form-group <?php if ($model->hasErrors('${1:field}')) { echo 'has-error'; } ?>">
		<?php echo $form->labelEx($model, '$1', ['class' => 'col-lg-2 control-label']); ?>
		<div class="col-lg-6">
			<div class="checkbox">
				<label>
				<?php
				echo $form->checkBox(
					$model,
					'$1',
					[
						'value'        => 'Y',
						'uncheckValue' => 'N',
					]
				);
				?> &nbsp; </label>
			</div>
		</div>
		<?php echo $form->error($model, '$1', ['class' => 'text text-danger']); ?>
	</div>
#

snippet yform yii form input dropdown
	<div class="form-group <?php if ($model->hasErrors('${1:attribute}')) { echo 'has-error'; } ?>">
		<?php echo $form->labelEx($model, '$1', ['class' => 'col-lg-2 control-label']); ?>
		<div class="col-lg-6">
		<?php
			$dropDownList = [
				'event_list_paginated' => t('Lista de evenimente paginată'),
				'first_event'          => t('Primul eveniment'),
			];
			echo $form->dropDownList(
				$model,
				'$1',
				$dropDownList,
				[
					//'prompt' => t('Prompt'),
					'empty' => t('Alege o valoare'),
					'class' => 'form-control'
				]
			);
		?>
		</div>
		<div class="help-block">
			<?php echo $form->error($model, '$1', ['class' => 'text text-danger']); ?>
		</div>
	</div>
#

snippet yvalidator exist
	[
		'${1:field}',
		'exist',
		'className'     => '${2:ModelName}', // numele modelului de validat. Order, Booking, etc
		'attributeName' => '${3:id}',		 // numele campului de verificat. de obicei este id
		'allowEmpty'    => false, // permite sa fie empty campul
		'skipOnError'   => true,  // nu se aplica validatorul daca exista deja o eroare pe acest camp. de ex exista valdatorul de "integer" care se aplica inainte, si da eroare, caz in care nu mai aplic validatorul curent
		'on'            => ['insert', 'insert_admin'], // scenariile permise
		'except'        => ['testcode', 'search'],		// scenariile excluse
	],
#
snippet yfilter filter
	public function filter${1:FilterName}($filterChain)
	{
		${2:codehere}
		$filterChain->run();
	}
#
snippet yuca user->checkAccess
	Yii::app()->user->checkAccess('${1:rule}')
snippet yuca userCheckAccess
	userCheckAccess('${1:rule}')
snippet yuca userCheckAccess cu handle
	if (! userCheckAccess('${1:event.dgitl}', ['event' => $event])) {
		$this->handleFailedUserCheckAccess(${2}/* $redirectToLoginIfGuest = true, $forbiddenMessage = null, $authRequiredMessage = null */);
	}
#
snippet ymigrate createTable
	$this->createTable('${1:table_name}',
		[
			'id'             => 'int(11) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY',
			'code'           => 'VARCHAR(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL',
			'user_id'        => 'int(11)',
			'create_time'    => 'DATETIME NOT NULL',
			'create_from_ip' => 'varchar(50) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL',

			'UNIQUE INDEX \`$1_code\` (\`code\`)',
			'CONSTRAINT \`$1_user_id\` FOREIGN KEY (\`user_id\`) REFERENCES \`user\` (\`id\`)
				ON DELETE SET NULL
				ON UPDATE CASCADE',
		],
		'ENGINE=InnoDB DEFAULT CHARSET=utf8'
	);
snippet ymigrate addColumn
	$this->addColumn('${1:table}', '${2:column}', 'int(11) DEFAULT NULL AFTER id');
snippet ymigrate dropColumn
	$this->dropColumn('${1:table}', '${2:column}');
snippet ymigrate alterColumn
	// adăugat moudul maintenance
	$this->alterColumn('${1:table}', '${2:column}', '${3:ENUM("one", "two") DEFAULT NULL}');
snippet ymigrate createIndex
	$this->createIndex('$1_$2', '${1:table}', '${2:column}', ${3:false});
snippet ymigrate dropIndex
	$this->dropIndex('${1:name}', '${2:table}');
snippet ymigrate addForeignKey
	$this->addForeignKey('$1_$2', '${1:table}', '${2:column}', '${3:ref_table}', '${4:ref_colun}', 'CASCADE', 'CASCADE');
snippet ymigrate dropForeignKey
	$this->dropForeignKey('${1:name}', '${2:table}');
