snippet con console.debug
	console.debug(${1});${2}
#
snippet con console.log
	console.log(${1});${2}
#
snippet con console.dir
	console.dir(${1});${2}
#
snippet dbl
	console.log('(' + (new Error).lineNumber + ') ' + (new Error).fileName);
#
# acolade
snippet {
	{
		${1}
	}
#
snippet then
	then(function() {
		${1}
	})${2}
#
snippet fail
	fail(function() {
		${1}
	})${2}
#
snippet always
	always(function() {
		${1}
	})${2}
#
snippet thenfail
	always(function() {
		${1}
	}).
	then(function() {
		${2}
	}).
	fail(function() {
		${3}
	})${4}
#
snippet deferred
	$.Deferred(function(def) {
		${1}
	}).promise();
	${2}
#
snippet when
	$.when(${1:promise1}, ${2:promise2}).
	then(function() {
		${3}
	}).
	fail(function() {
		${4}
	});
	${5}
#

# underscore
snippet _undef
	_.isUndefined(${1})
#

snippet _bind
	_.bind(${1:function}, ${2:object}, ${3:arguments})${4}
#

snippet _ex
	_.extend(${1:destination}, ${2:*sources})${3}
#

snippet _each
	_.each(${1:list}, ${2:iteratee}, ${3:[context]});
#

snippet _map
	_.map(${1:list}, ${2:iteratee}, ${3:[context]});
#

snippet .forEach
	.forEach(function(item) {
		${1}
	})${2}


#
# romainl
# var
snippet =
	= ${1:value};
# Function as var
snippet =f
	= function(${2}) {
		${3}
	};
# Function
snippet fun
	function ${1:function_name}(${2}) {
		${3}
	}
# Anonymous Function
snippet f
	function(${1}){${2}}
# if
snippet if
	if (${1}) {
		${2}
	}
# if ... else
snippet ife
	if (${1}) {
		${2}
	} else {
		${3}
	}
snippet else
	else {
		${1}
	}
# tertiary conditional
snippet ter
	${1:condition} ? ${2:if true} : ${3:if false};
# switch
snippet switch
	switch(${1:expression}) {
		case ${3} :
			${4}
			break;
		default:
			${2}
	}
# case
snippet case
	case ${1} :
		${2}
		break;
# for (...) {...} (Cached length)
snippet for
	for (var i = 0, len = ${1:things}.length; i < len; i++) {
		${2}
	}
# for (...) {...}
snippet forc Classic
	for (var ${2:i} = 0; $2 < ${1:things}.length; $2${3:++}) {
		${4}
	}
# for (...) {...} (Improved Native For-Loop)
snippet fori Improved Native For-Loop
	for (var ${2:i} = ${1:things}.length - 1; $2 >= 0; $2${3:--}) {
		${4}
	}
# forin
snippet forin
	for (${1:needle} in ${2:haystack}) {
		${3}
	}
# while (...) {...}
snippet while
	while (${1}) {
		${2}
	}
# do...while
snippet do
	do {
		${2}
	} while (${1});
# setTimeout function
snippet time setTimeout
	window.setTimeout(function() {${2}}, ${1:100});
# setTimeout function
snippet time setInterval
	window.setInterval(function() {${2}}, ${1:100});
# Get Elements
snippet gett
	getElementsByTagName('${1}')${2}
# Get Element
snippet geti
	getElementById('${1}')${2}
#
#
#
##########
# EVENTS #
##########
# Add Events
# Add Event
snippet adde
	addEventListener('${1:event_name}', function(event) {
		${2}
	}, false);
#
snippet ev addEventListener
	addEventListener('${1:event_name}', function(event) {
		${2}
	}, false);
#
snippet ev preventDefault
	.preventDefault();
#
snippet ev stopPropagation
	.stopPropagation();
#

# Event handler
snippet handler
	function ${1:function_name}(e) {
		var e   = e || window.event;
		var src = e.target || e.srcElement;
		if (typeof e.stopPropagation === "function") {
			e.stopPropagation();
		}
		if (typeof e.cancelBubble !== "undefined") {
			e.cancelBubble = true;
		}
		if (typeof e.preventDefault === "function") {
			e.preventDefault();
		}
		if (typeof e.returnValue !== "undefined") {
			e.returnValue = false;
		}

		${2:// Do stuff with stuff}
	}
# Target
snippet targ
	var ${1:target} = ${2:event}.target || $2.srcElement;${3}

#
#
#########
# ARRAY #
#########
# Array > Literal
snippet ar
	var ${1:array_name} = [
		${2}
	];
# Array > item
snippet arit
	${1:array_name}[${2:0}]${3}
#
#
#
##########
# OBJECT #
##########
# Object > Literal
snippet obj
	var ${1:object_name} = {${2}};
# Object > Property
snippet :
	${1:property_name} : ${2:value}
# functie, ca si proprietate. vezi si :m
snippet :f
	${1:method_name} : function(${2}) {
		${3}
	}
# "inline" function
snippet :if
	${1:method_name} : function(${2}) {${3}}
# metoda
snippet :m
	${1:method_name} : function(${2})
	{
		${3}
	}
#
snippet :'
	${1:method_name} : '${2}'${3}
#
#
#
########
# JSON #
########
# JSON.parse
snippet json JSON.parse()
	JSON.parse(${1:jstr});
# JSON.stringify
snippet json JSON.stringify()
	JSON.stringify(${1:object});
#
#
#
###############
# Constructor #
###############
# Constructor > Constructor
snippet cons
	var ${1:Constructor_name} = function(${2}) {
		var self = this;
		${3}
	};
# Constructor > Public Member
snippet pub public member
	${1:this}.${2:public_property_name} = ${3};${4}
# Constructor > Privileged Method
snippet pub privileged method
	${1:this}.${2:privileged_method_name} = function(${3}) {
		${4}
	};
# Constructor > Public Method
snippet prot
	prototype.${1:method_name} = function(${2}) {
		${3}
	};
# Constructor > Inheritance
snippet inherit
	function inherit(Child, Parent) {
		var Inter = function() {};
		Inter.prototype = Parent.prototype;
		Child.prototype = new Inter();
		Child.prototype.constructor = Child;
	}
	${1}
# Constructor > New Instance
snippet new
	var ${1:instance_name} = new ${2:Constructor_name}(${3});${4}
# Console
snippet log
	console.log(${1});
# Try ... Catch
snippet try
	try {
		${1}
	}
	catch(e)${2}
# Document
snippet d
	document.
# Window
snippet w
	window.
# selfie
snippet selfie
	(function ${1:function_name}() {
		$3
	})(${2:scope});
# Module pattern
snippet mod
	var ${1:module_name} = (function $1(${2}) {
		// private properties
		// var property_name = value;

		// the exported object
		// var object = {};

		// public properties of the exported object
		// object.property_name = value;

		var $1 = {};
		${3}

		return $1;
	}());
# Getter
snippet getter
	get${1:Property_name}: function() {
		return ${2:property_name}
	}
# Setter
snippet setter
	set${1:Property_name}: function(${2:value}) {
		return (${3:property_name} = $2);
	}
# Callback
snippet callback
	callback.call(${1});
#
#
#
##############
# require.js #
##############
# require
snippet require
	require(["${1:package_name}"], function(${2:argument}) {
		${3}
	});
# require()
snippet req
	var ${1:instance_name} = require("${2:package_name}");
# define
snippet def function without dependencies
	define(${1:module_name}, function() {
		${2}
		return {};
	});
# define function with dependencies
snippet def function with dependencies
	define(${1:module_name}, [${2:dependencies}], function(${3}) {
		${4}
		return {};
	});
# define object literal
snippet def object literal
	define({
		${1}
	});
# define commonJS wrapper
snippet def commonjs wrapper
	define(function(require, exports, module) {
		${1}
	});
# exports
snippet exp
	module.exports = ${1}
#
#
#
##########
# JQUERY #
##########
# jquery stub
snippet ready jQuery
	$(document).ready(function() {
		${1}
	});
# jquery collection
snippet $
	$('${1}')${2}
# jquery id
snippet $#
	$('#${1}')${2}
# jquery class
snippet $.
	$('.${1}')${2}
snippet $d
	$('[data-${1}]')${2}
snippet d-
	[data-${1}="${2}"]
snippet dp-
	[data-purpose="${1}"]
#
# common jquery patterns
# WIP
# AJAX
snippet ajax ajax()		Perform an asynchronous HTTP (Ajax) request.
	$.ajax({
		url: '${1:mydomain.com/url}',
		type: '${2:POST}',
		dataType: '${3:xml/html/script/json}',
		data: ${4:$.param( $('Element or Expression}') )},
		cache: false,
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet ajax ajaxComplete()	Register a handler to be called when Ajax requests complete.
	ajaxComplete(function (${1:e}, xhr, settings) {
		${2:// callback}
	});
snippet ajax ajaxError()		Register a handler to be called when Ajax requests complete with an error.
	ajaxError(function (${1:e}, xhr, settings, thrownError) {
		${2:// error callback}
	});
snippet ajax get()		Load data from the server using a HTTP GET request
	$.get('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet ajax post()		Load data from the server using a HTTP POST request.
	$.post('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet ajax ajaxPrefilter()	Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
	$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {
		${3: // Modify options, control originalOptions, store jqXHR, etc}
	});
snippet ajax ajaxSend()		Attach a function to be executed before an Ajax request is sent.
	ajaxSend(function (${1:request, settings}) {
		${2:// error callback}
	});
snippet ajax ajaxSetup()		Set default values for future Ajax requests. Its use is not recommended.
	$.ajaxSetup({
		url: "${1:mydomain.com/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: ${4:$.param( $("Element or Expression") )},
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet ajax ajaxStart()		Register a handler to be called when the first Ajax request begins.
	$.ajaxStart(function () {
		${1:// handler for when an AJAX call is started and no other AJAX calls are in progress;}
	});
snippet ajax ajaxStop()		Register a handler to be called when all Ajax requests have completed.
	$.ajaxStop(function () {
		${1:// handler for when all AJAX calls have been completed;}
	});
snippet ajax ajaxSuccess()	Attach a function to be executed whenever an Ajax request completes successfully.
	$.ajaxSuccess(function (${1:e}, xhr, settings) {
		${2:// handler for when any AJAX call is successfully completed;}
	});
# CALLBACKS
snippet C Callbacks()
	$.Callbacks()
snippet C add()
	add(${1:callbacks})${2}
snippet C disable()
	disable()
snippet C empty()
	empty()
snippet C fire()
	fire(${1:args})
snippet C fired()
	fired()
snippet C fireWith()
	fireWith(${1:this}, ${2:args})
snippet C has()
	has(${1:callback})
snippet C lock()
	lock()
snippet C locked()
	locked()
snippet C remove()
	remove(${1:callbacks})
# DEFFERED
snippet D Deffered()
	$.Deferred()
snippet D always()
	always(${1:callbacks})
snippet D done()
	done(${1:callbacks})
snippet D fail()
	fail(${1:callbacks})
snippet D isRejected()
	isRejected()
snippet D isResolved()
	isResolved()
snippet D notify()
	notify(${1:args})
snippet D notifyWith()
	notifyWith(${1:this}, ${2:args})
snippet D filter
	then(${1:doneFilter}, ${2:failFilter}, ${3:progressFilter})
snippet D progress()
	progress(${1:callbacks})
snippet D promise()
	promise(${1:target})
snippet D reject()
	reject(${1:args})
snippet D rejectWith()
	rejectWith(${1:this}, ${2:args})
snippet D resolve()
	resolve(${1:args})
snippet D resolveWith()
	resolveWith(${1:this}, ${2:args})
snippet D state()
	state()
snippet D then()
	then(${1:doneCallbacks}, ${2:failCallbacks}, ${3:progressCallbacks})
snippet D when()
	$.when(${1:deferreds})
# IS
snippet is is()
	is('${1:selector expression}')
snippet is isArray()
	$.isArray(${1:obj})
snippet is isEmptyObject()
	$.isEmptyObject(${1:obj})
snippet is isFunction()
	$.isFunction(${1:obj})
snippet is isNumeric()
	$.isNumeric(${1:value})
snippet is isPlainObject()
	$.isPlainObject(${1:obj})
snippet is isWindow()
	$.isWindow(${1:obj})
snippet is isXMLDoc()
	$.isXMLDoc(${1:node})
# MOUSE
snippet mouse mousedown()
	mousedown(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseenter()
	mouseenter(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseleave()
	mouseleave(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mousemove()
	mousemove(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseout()
	mouseout(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseover()
	mouseover(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseup()
	mouseup(function (${1:e}) {
		${2:// event handler}
	});
# REMOVE
snippet rem remove()
	remove()
snippet rem removeAttr()
	removeAttr('${1:attribute name}')
snippet rem removeClass()
	removeClass('${1:class name}')
snippet rem removeData()
	removeData('${1:key name}')
snippet rem removeData(a,b)
	$.removeData(${1:element}${2:, 'key name}')
snippet rem removeProp()
	removeProp('${1:property name}')
# REPLACE
snippet rep replaceAll()
	replaceAll(${1:target})
snippet rep replaceWith()
	replaceWith(${1:content})
# FADE
snippet fade fadeIn()
	fadeIn('${1:slow/400/fast}')
snippet fade fadeIn() + callback
	fadeIn('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
snippet fade fadeOut()
	fadeOut('${1:slow/400/fast}')
snippet fade fadeOut() + callback
	fadeOut('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
snippet fade fadeTo()
	fadeTo('${1:slow/400/fast}', ${2:0.5})
snippet fade fadeTo() + callback
	fadeTo('${1:slow/400/fast}', ${2:0.5}, function () {
		${3:// callback;}
	});
# SLIDE
snippet slide slideToggle()
	slideToggle('${1:slow/400/fast}')
snippet slide slideUp()
	slideUp('${1:slow/400/fast}')
snippet slide slideUp() + callback
	slideUp('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
snippet slide slideDown()
	slideDown('${1:slow/400/fast}')
snippet slide slideDown() + callback
	slideDown('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
# SCROLL
snippet scroll scroll() + callback
	scroll(function (${1:e}) {
		${2:// event handler}
	});
snippet scroll scrollLeft()
	scrollLeft(${1:value})
snippet scroll scrollTop()
	scrollTop(${1:value})
# ATTR
snippet attr attr('','')
	attr('${1:attribute}', '${2:value}')
snippet attr attr({'':''})
	attr({'${1:attr1}': '${2:value1}'${3}})
# CSS
snippet css css('','')
	css('${1:attribute}', '${2:value}')
snippet css css({'':''})
	css({'${1:css1}': '${2:value1}'${3}})
# FOCUS
snippet focus focus() + callback
	focus(function (${1:e}) {
		${2:// event handler}
	});
snippet focus focusIn() + callback
	focusIn(function (${1:e}) {
		${2:// event handler}
	});
snippet focus focusOut() + callback
	focusOut(function (${1:e}) {
		${2:// event handler}
	});
# MISCELLANEOUS
snippet add add()
	add('${1:selector expression}')
snippet add addClass()
	addClass('${1:class name}')
snippet after
	after('${1:Some text <b>and bold!</b>}')
snippet andself
	andSelf()
snippet animate
	animate({${1:param1: value1, param2: value2}}, ${2:speed})
snippet append
	append('${1:Some text <b>and bold!</b>}')
snippet appendto
	appendTo('${1:selector expression}')
snippet before
	before('${1:Some text <b>and bold!</b>}')
snippet bind
	bind('${1:event name}', function (${2:e}) {
		${3:// event handler}
	});
snippet blur
	blur(function (${1:e}) {
		${2:// event handler}
	});
snippet change
	change(function (${1:e}) {
		${2:// event handler}
	});
snippet children
	children('${1:selector expression}')
snippet clearq
	clearQueue(${1:'queue name'})
snippet click
	click(function (${1:e}) {
		${2:// event handler}
	});
snippet clone
	clone()
snippet contains
	$.contains(${1:container}, ${2:contents});
snippet csshooks
	$.cssHooks['${1:CSS prop}'] = {
		get: function (elem, computed, extra) {
			${2: // handle getting the CSS property}
		},
		set: function (elem, value) {
			${3: // handle setting the CSS value}
		}
	};
snippet data
	data(${1:obj})
snippet dataa
	$.data('${1:selector expression}', '${2:key}'${3:, 'value'})
snippet dblclick
	dblclick(function (${1:e}) {
		${2:// event handler}
	});
snippet delay
	delay('${1:slow/400/fast}'${2:, 'queue name'})
snippet dele
	delegate('${1:selector expression}', '${2:event name}', function (${3:e}) {
		${4:// event handler}
	});
snippet deq
	dequeue(${1:'queue name'})
snippet deqq
	$.dequeue('${1:selector expression}'${2:, 'queue name'})
snippet detach
	detach('${1:selector expression}')
snippet die
	die(${1:event}, ${2:handler})
snippet each
	each(function (index) {
		${1:this.innerHTML = this + " is the element, " + index + " is the position";}
	});
snippet el
	$('<${1}/>'${2:, {}})
snippet eltrim
	$.trim('${1:string}')
snippet empty
	empty()
snippet end
	end()
snippet eq
	eq(${1:element index})
snippet error
	error(function (${1:e}) {
		${2:// event handler}
	});
snippet eventsmap
	{
		:f${1}
	}
snippet extend
	$.extend(${1:true, }${2:target}, ${3:obj})
snippet filter
	filter('${1:selector expression}')
snippet filtert
	filter(function (${1:index}) {
		${2}
	})
snippet find
	find('${1:selector expression}')
snippet get
	get(${1:element index})
snippet getjson
	$.getJSON('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet getscript
	$.getScript('${1:mydomain.com/url}', function (script, textStatus, jqXHR) {
		${2:// callback}
	});
snippet grep
	$.grep(${1:array}, function (item, index) {
		${2}
	}${3:, true});
snippet hasc
	hasClass('${1:className}')
snippet hasd
	$.hasData('${1:selector expression}');
snippet height
	height(${1:integer})
snippet hide
	hide('${1:slow/400/fast}')
snippet hidec
	hide('${1:slow/400/fast}', function () {
		${2:// callback}
	});
snippet hover
	hover(function (${1:e}) {
		${2:// event handler}
	}, function ($1) {
		${3:// event handler}
	});
snippet html
	html('${1:Some text <b>and bold!</b>}')
snippet inarr
	$.inArray(${1:value}, ${2:array});
snippet insa
	insertAfter('${1:selector expression}')
snippet insb
	insertBefore('${1:selector expression}')
snippet kdown
	keydown(function (${1:e}) {
		${2:// event handler}
	});
snippet kpress
	keypress(function (${1:e}) {
		${2:// event handler}
	});
snippet kup
	keyup(function (${1:e}) {
		${2:// event handler}
	});
snippet last
	last('${1:selector expression}')
snippet live
	live('${1:events}', function (${2:e}) {
		${3:// event handler}
	});
snippet load
	load(function (${1:e}) {
		${2:// event handler}
	});
snippet loadf
	load('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (responseText, textStatus, xhr) {
			${3:// success callback}
		}
	});
snippet makearray
	$.makeArray(${1:obj});
snippet map
	map(function (${1:index}, ${2:element}) {
		${3:// callback}
	});
snippet mapp
	$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {
		${4:// callback}
	});
snippet merge
	$.merge(${1:target}, ${2:original});
snippet next
	next('${1:selector expression}')
snippet nexta
	nextAll('${1:selector expression}')
snippet nextu
	nextUntil('${1:selector expression}'${2:, 'filter expression'})
snippet not
	not('${1:selector expression}')
snippet off
	off('${1:events}', '${2:selector expression}'${3:, handler})
snippet offset
	offset()
snippet offsetp
	offsetParent()
snippet on
	on('${1:events}', '${2:selector expression}', function (${3:e}) {
		${4:// event handler}
	});
snippet one
	one('${1:event name}', function (${2:e}) {
		${3:// event handler}
	});
snippet outerh
	outerHeight()
snippet outerw
	outerWidth()
snippet param
	$.param(${1:obj})
snippet parent
	parent('${1:selector expression}')
snippet parents
	parents('${1:selector expression}')
snippet parentsu
	parentsUntil('${1:selector expression}'${2:, 'filter expression'})
snippet parsejson
	$.parseJSON(${1:data})
snippet parsexml
	$.parseXML(${1:data})
snippet pos
	position()
snippet prepend
	prepend('${1:Some text <b>and bold!</b>}')
snippet prependto
	prependTo('${1:selector expression}')
snippet prev
	prev('${1:selector expression}')
snippet preva
	prevAll('${1:selector expression}')
snippet prevu
	prevUntil('${1:selector expression}'${2:, 'filter expression'})
snippet promise
	promise(${1:'fx'}, ${2:target})
snippet prop
	prop('${1:property name}')
snippet proxy
	$.proxy(${1:function}, ${2:this})
snippet pushstack
	pushStack(${1:elements})
snippet queue
	queue(${1:name}${2:, newQueue})
snippet queuee
	$.queue(${1:element}${2:, name}${3:, newQueue})
snippet reset
	reset(function (${1:e}) {
		${2:// event handler}
	});
snippet resize
	resize(function (${1:e}) {
		${2:// event handler}
	});
snippet select
	select(function (${1:e}) {
		${2:// event handler}
	});
snippet serialize
	serialize()
snippet serializea
	serializeArray()
snippet show
	show('${1:slow/400/fast}')
snippet showc
	show('${1:slow/400/fast}', function () {
		${2:// callback}
	});
snippet sib
	siblings('${1:selector expression}')
snippet size
	size()
snippet slice
	slice(${1:start}${2:, end})
snippet stop
	stop('${1:queue}', ${2:false}, ${3:false})
snippet submit
	submit(function (${1:e}) {
		${2:// event handler}
	});
snippet text
	text(${1:'some text'})
snippet this
	$(this)
snippet toarr
	toArray()
snippet tog
	toggle(function (${1:e}) {
		${2:// event handler}
	}, function ($1) {
		${3:// event handler}
	});
snippet togclass
	toggleClass('${1:class name}')
snippet togsh
	toggle('${1:slow/400/fast}')
snippet trig
	trigger('${1:event name}')
snippet trigh
	triggerHandler('${1:event name}')
snippet $trim
	$.trim(${1:str})
snippet $type
	$.type(${1:obj})
snippet unbind
	unbind('${1:event name}')
snippet undele
	undelegate(${1:selector expression}, ${2:event}, ${3:handler})
snippet uniq
	$.unique(${1:array})
snippet unload
	unload(function (${1:e}) {
		${2:// event handler}
	});
snippet unwrap
	unwrap()
snippet val
	val('${1:text}')
snippet width
	width(${1:integer})
snippet wrap
	wrap('${1:&lt;div class="extra-wrapper"&gt;&lt;/div&gt;}')

#
# metrological
# metrological button
snippet metrobutton
	var ${1:aButton} = new MAF.control.TextButton({
		label: $_('${2:aButton}'),
		styles: {
			width: ${3:400},
			height: ${4:60},
			hOffset: ${5:200},
			vOffset: ${6:300}
		},
		textStyles: {
			anchorStyle: 'center'
		},
		events: {
			onSelect: function () {
				${7://do something on select}
			}
		}
	}).appendTo(view);
#
#metrological alert
snippet mafalert
	new MAF.dialogs.Alert({
		title:'${1:title}',
		message: '${2:message}',
		buttons: [
		{
			label:"${3:label}",
			callback: function () {
			//${4}
			}
		},
		{
			label:"${5:label}",
			callback: function () {
			//${6}
			}
		}
		],
		cancelCallback: function () {
		}
	}).show();
#
#metrologicala view
snippet mafview
	var ${1:MyView} = new MAF.Class({
		ClassName: '$1',

		Extends: MAF.system.FullscreenView,
		//Extends: MAF.system.OptionSelectView,
		//Extends: MAF.system.SidebarView,
		//Extends: MAF.system.WindowedView,

		initialize: function () {
			log('initialize $1');
			var view = this;
			view.parent();
			view.registerMessageCenterListenerCallback(view.dataHasChanged);
		},

		dataHasChanged: function (event) {
			log('dataHasChanged $1');
			var view = this;

			if (event.payload.key === '${2:viewData}') {
				var data = event.payload.value;
			}
		},


		initView: function () {
			log('initView $1');
			var view = this;
			view.parent();
		},


		createView: function () {
			log('createView $1');
			var view = this;
			view.parent();
		},


		updateView: function () {
			log('updateView $1');
			var view = this;
			view.parent();

			if (view.backParams.reset !== false && !MAF.messages.exists('$2')) {
				api.$2();
			}
		},


		selectView: function () {
			log('selectView $1');
			var view = this;
			view.parent();
		},


		focusView: function () {
			log('focusView $1');
			var view = this;
			view.parent();
		},


		unselectView: function () {
			log('unselectView $1');
			var view = this;
			view.parent();
		},


		hideView: function () {
			log('hideView $1');
			var view = this;
			view.parent();
		},


		destroyView: function () {
			log('destroyView $1');
			var view = this;
			view.parent();
		}
	});
#
# metrological request
snippet mafreq
	MAF.utility.WaitIndicator.up();
	new Request({
		url: 'http://cdn.metrological.com/examples/alphabet.json',
		data: _.extend({"controller":"${1:controller}", "_action":"${2:action}"}, data, api.defaultParams),

		// onSucces, this function is called when the server returns state 200, after this it will send data through the chosen parameter name.
		onSuccess: function (json) {
			console.log('succes', json);
			MAF.utility.WaitIndicator.down();
		},
		// onFailure, this function is called when the server returns something else than state 200.
		onFailure: function (error) {
			console.log('failure', error);
			MAF.utility.WaitIndicator.down();
		},
		// onError, this function is called when an error has occured during either the onSucces, or onFailure event.
		onError: function (error) {
			console.log('error', error);
			MAF.utility.WaitIndicator.down();
		}
	}).send();
#
snippet mafbutton
	view.controls['${1:id}'] = new MAF.control.TextButton({
		guid: '$1',
		theme: false, // Remove default theme
		label: $_('${2:label}'),
		styles: {
			height: 80,
			width: 400,
			//vOffset: 150 + (i * 100),
			//hOffset: (view.width - 400) / 2,
			borderRadius: 10
		},
		textStyles: {
			fontSize: 35,
			anchorStyle: 'center'
		},
		events: {
			onFocus: function () {
				log('button $1 focus');
				this.setStyle('backgroundColor', Theme.getStyles('BaseFocus', 'backgroundColor'));
			},
			onBlur: function () {
				log('button $1 blur');
				this.setStyle('backgroundColor', null);
			},
			onSelect: function (event) {
				log('button $1 select');
				${3}
			}
		}
	}).appendTo(view);
#
snippet mafloadview
	MAF.application.loadView();
#
snippet maflog
	log(${1});${2}
#
snippet maflogclear
	log("\n".repeat(20));${1}
#
snippet mafmess fetch
	MAF.messages.fetch('${1:key}');
#
snippet mafmess store
	MAF.messages.store('${1:key}', ${2:value});
#
snippet mafmess exist
	MAF.messages.exist('${1:key}');
#
snippet mafmess remove
	MAF.messages.remove('${1:key}');
#

#
snippet xhr xhr.get
	var xhr = new XMLHttpRequest();
	xhr.open('GET', '${1:url}', true);
	xhr.onload = function () {
		// console.log('loaded');
	};
	xhr.send(null);

snippet xhr xhr.post
	var xhr = new xmlhttprequest();
	xhr.open('post', '${1:url}', true);

	//send the proper header information along with the request
	xhr.setrequestheader("content-type", "application/x-www-form-urlencoded");

	xhr.onreadystatechange = function() {//call a function when the state changes.
		if(xhr.readystate == xmlhttprequest.done && xhr.status == 200) {
			// request finished. do processing here.
		}
	}
	xhr.send("foo=bar&lorem=ipsum");
	// xhr.send('string');
	// xhr.send(new blob());
	// xhr.send(new int8array());
	// xhr.send({ form: 'data' });
	// xhr.send(document);

snippet jquery jquery widget
	(function ($) {
	    if ($.fn.${1:widgetName}) {
	        return;
	    }

	    var _class = function(element, options) {
	        this.options  = options;
	        this.element  = element;
	        this.$element = $(element);

			this.attachEvents();
	    }

		_class.prototype.attachEvents = function()
		{
		}

	    $.fn.$1 = function(option) {
	        return this.each(function() {
	            var $this = $(this);
	            var $handler = $this.data('$1');

	            if (! $handler) {
	                $handler = new _class(this, option);
	                $this.data('$1', $handler);
	            }

	            if (typeof option == 'string') {
	                return $handler[option].call($handler);
	            }
	        });
	    };
	}(jQuery));

snippet promise 
	new Promise(function(resolve, reject) {
		resolve();
	});

snippet ready nativ
	document.addEventListener('DOMContentLoaded', function () {	
		${1}
	});

snippet fetch fetch json
	fetch(${1:url}, {	
		'method': 'post',
		body: new URLSearchParams
	}).then(function(response) {	
		return response.json();
	}).then(function(json) {	
		console.log(json);
	}).catch(function(error) {	
		console.log(error);
	});

snippet fetch fetch form json
	const formData = new FormData(form);
	const searchParams = new URLSearchParams(formData);

	fetch(form.action, {	
		'method': 'post',
		body: searchParams
	}).then(function(response) {	
		return response.json();
	}).then(function(json) {	
		console.log(json);
	}).catch(function(error) {	
		console.log(error);
	});


snippet fetch fetch text
	fetch(${1:url}, {	
		'method': 'post',
		body: new URLSearchParams
	}).then(function(response) {	
		return response.text();
	}).then(function(text) {	
		console.log(text);
	}).catch(function(error) {	
		console.log(error);
	});
