# phpl phpline
snippet php
	<?php ${1} ?>
#
# php invnverted
snippet phpi
	?>${1}<?php
#
snippet phpe
	<?php echo ${1} ?>
#

snippet phpeh
	<?php echo htmlspecialchars(${1}); ?>
#

snippet phpehh
	<?php echo h(${1}); ?>
#

snippet phpej
	<?php echo json_encode(${1}); ?>
#

snippet epre
	echo '<pre>';
	${1}
	echo '</pre>';
#

snippet if
	if (${1}) {
		${2}
	}
#

snippet ife
	if (${1}) {
		${2}
	} else {
		${3}
	}
#

snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
#

snippet ehr
	echo '<hr/>';${1}
#

snippet db
	debug(${1});${2}
#

snippet dbr
	debug_request();${2}
#

snippet dbl
	debug('line '. __LINE__. "<br/>\n");
#

snippet dbfl
	var_dump(__FILE__. ' #'. __LINE__. "<br/>\n");
#

snippet dl
	echo PHP_EOL, __file__, ' #', __line__, PHP_EOL; exit;
#
snippet dbmemory
	echo '[ '. 'memory '. round(memory_get_usage() / (1024 * 1024), 2). '/'. round(memory_get_peak_usage() / (1024 * 1024), 2). ' ] ', __FILE__. ' #'. __LINE__, PHP_SAPI == 'cli' ? PHP_EOL : '<br />';
#
snippet dbtime
		if (isset($GLOBALS['_db_mctime'])) { echo '[ time: ', ((microtime(true) - $GLOBALS['_db_mctime']) * 1000), 'ms ] ', __FILE__. ' #'. __LINE__, PHP_SAPI == 'cli' ? PHP_EOL : '<br />'; } $GLOBALS['_db_mctime'] = microtime(true);
#

snippet vd
	var_dump(${1});${2}
#

snippet gcm
	get_class_methods(${1})
#

snippet gif
	get_included_files()
#

snippet fga
	func_get_args()
#

snippet vdx
	var_dump(${1});exit;
#

snippet try
	try {
		${1}
	} catch (${2}Exception $exception) {
		${3}
		throw $exception;
	}
#

snippet {
	{
		${1}
	}
#

snippet ['
	['${1}']${2}
#

snippet [
	[${1}]${2}
#

snippet ob
	ob_start();
	?>
	${1}
	<?php
	$content = ob_get_clean();

# snippet pentru smarty
snippet {php
	{php}?>
	${1}
	<?php{/php}
#

# echo sprintf('ceva %s\n', $altceva);
snippet espf
	echo sprintf('${1} %s', ${2});${3}
#

snippet spf
	sprintf('${1} %s', ${2})${3}
#

# Tertiary conditional
snippet =?:
	$${1:foo} = ${2:true} ? ${3:a} : ${4};
snippet ?:
	${1:true} ? ${2:a} : ${3}
#

snippet C
	$_COOKIE['${1:variable}']${2}
snippet E
	$_ENV['${1:variable}']${2}
snippet F
	$_FILES['${1:variable}']${2}
snippet G
	$_GET['${1:variable}']${2}
snippet P
	$_POST['${1:variable}']${2}
snippet R
	$_REQUEST['${1:variable}']${2}
snippet S
	$_SERVER['${1:variable}']${2}
snippet SS
	$_SESSION['${1:variable}']${2}
#

snippet armap
	array_map(function($item) {
		${2:// callback}
		return $item;
	}, ${1:$array})
snippet arred
	array_reduce(${1:$array}, function($carry, $item) {
		${2:// callback}
		return $carry;
	}, array())
snippet imp
	implode(${1:', '}, ${2:$array})
snippet ake
	array_key_exists(${1:'key'}, ${2:$array})
#

snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
#

snippet foreach
	foreach ($${1:variable} as $${2:value}) {
		${3:// code...}
	}
snippet foreachil
	<?php foreach ($${1:variable} as $${2:value}) { ?>
		${3:<!-- html... -->}
	<?php } ?>
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${4:// code...}
	}
snippet foreachkil
	<?php foreach ($${1:variable} as $${2:key} => $${3:value}) { ?>
		${4:<!-- html... -->}
	<?php } ?>
#
snippet nl
	PHP_EOL
#
snippet ret
	return
#
snippet rett
	return true;
#
snippet retf
	return false;
#
snippet retn
	return null;
#
snippet reta
	return array(${1});

snippet headerutf8
	header('Content-Type: text/html; charset=utf-8');
snippet header100
	header('HTTP/1.1 100 Continue', true, 100);
snippet header101
	header('HTTP/1.1 101 Switching Protocols', true, 101);
snippet header200
	header('HTTP/1.1 200 OK', true, 200);
snippet header201
	header('HTTP/1.1 201 Created', true, 201);
snippet header202
	header('HTTP/1.1 202 Accepted', true, 202);
snippet header203
	header('HTTP/1.1 203 Non-Authoritative Information', true, 203);
snippet header204
	header('HTTP/1.1 204 No Content', true, 204);
snippet header205
	header('HTTP/1.1 205 Reset Content', true, 205);
snippet header206
	header('HTTP/1.1 206 Partial Content', true, 206);
snippet header300
	header('HTTP/1.1 300 Multiple Choices', true, 300);
snippet header301
	header('HTTP/1.1 301 Moved Permanently', true, 301);
	header('Location: '. ${1:$url});
snippet header302
	header('HTTP/1.1 302 Moved Temporarily', true, 302);
snippet header303
	header('HTTP/1.1 303 See Other', true, 303);
snippet header304
	header('HTTP/1.1 304 Not Modified', true, 304);
snippet header305
	header('HTTP/1.1 305 Use Proxy', true, 305);
snippet header400
	header('HTTP/1.1 400 Bad Request', true, 400);
snippet header401
	header('HTTP/1.1 401 Unauthorized', true, 401);
snippet header402
	header('HTTP/1.1 402 Payment Required', true, 402);
snippet header403
	header('HTTP/1.1 403 Forbidden', true, 403);
snippet header404
	header('HTTP/1.1 404 Not Found', true, 404);
snippet header405
	header('HTTP/1.1 405 Method Not Allowed', true, 405);
snippet header406
	header('HTTP/1.1 406 Not Acceptable', true, 406);
snippet header407
	header('HTTP/1.1 407 Proxy Authentication Required', true, 407);
snippet header408
	header('HTTP/1.1 408 Request Time-out', true, 408);
snippet header409
	header('HTTP/1.1 409 Conflict', true, 409);
snippet header410
	header('HTTP/1.1 410 Gone', true, 410);
snippet header411
	header('HTTP/1.1 411 Length Required', true, 411);
snippet header412
	header('HTTP/1.1 412 Precondition Failed', true, 412);
snippet header413
	header('HTTP/1.1 413 Request Entity Too Large', true, 413);
snippet header414
	header('HTTP/1.1 414 Request-URI Too Large', true, 414);
snippet header415
	header('HTTP/1.1 415 Unsupported Media Type', true, 415);
snippet header500
	header('HTTP/1.1 500 Internal Server Error', true, 500);
snippet header501
	header('HTTP/1.1 501 Not Implemented', true, 501);
snippet header502
	header('HTTP/1.1 502 Bad Gateway', true, 502);
snippet header503
	header('HTTP/1.1 503 Service Unavailable', true, 503);
snippet header504
	header('HTTP/1.1 504 Gateway Time-out', true, 504);
snippet header505
	header('HTTP/1.1 505 HTTP Version not supported', true, 505);
#

##########
# YII
##########

#yii.app
snippet ya
	Yii::app()${1}
#

snippet yapp
	Yii::app()${1}
#

snippet yass
	Yii::app()->getAssetManager()${1}
#

snippet ypoa
	Yii::getPathOfAlias(${1})
#

snippet yt
	t('${1}')
#

#yii.trace
snippet ytr
	Yii::trace(${1:message}, ${2:'category'});${3}
#

#yii.log
snippet ylog
	Yii::log(${1:message}, ${2:level}, ${3:category});${4}
#

#yii.request
snippet yreq Yii::app()->request
	Yii::app()->request${1}
#

#yii.request.post
snippet yreq Yii::app()->request->getPost()
	Yii::app()->request->getPost(${1})${2}
#

#yii.request.param
snippet yreq Yii::app()->request->getParam()
	Yii::app()->request->getParam(${1})${2}
#

#yii.request.query
snippet yreq Yii::app()->request->getQuery()
	Yii::app()->request->getQuery(${1})${2}
#

#yii.request.ip
snippet yreq Yii::app()->request->getUserHostAddress()
	Yii::app()->request->getUserHostAddress()${1}
#

snippet yreq Yii::app()->request->cookies[]
	Yii::app()->request->cookies['${1}']
#

snippet yreq Yii::app()->request->getIsPostRequest
	Yii::app()->request->getIsPostRequest()
#
<<<<<<< HEAD

snippet ymf
=======
snippet yfbpk
	findByPk(${1|pk})
#
snippet ymfbpk
>>>>>>> 635393643fdb05f3f38f2c02ac83dfcb7d992378
	model()->findByPk(${1|pk})
#

#yii.findByAttributes
snippet yfba
	findByAttributes(array('${1:key}' => ${2:value}))${3}
#
snippet ymfba
	model()->findByAttributes(array('${1:key}' => ${2:value}))${3}
#

snippet yp
	Yii::app()->params['${1}']${2}
#

snippet yflash setFlash
	Yii::app()->user->setFlash('success', ${1});${2}
#

snippet yflash addFlash
	Yii::app()->user->addFlash('success',${1});${2}
#

snippet ystate setState
	Yii::app()->user->setState('${1}', ${2});
#

snippet ystate getState
	Yii::app()->user->getState('${1}');
#

snippet ycache Yii::app()->cache->get
	Yii::app()->cache->get('${1:key}');
#

snippet ycache Yii::app()->cache->set
	Yii::app()->cache->set('${1:key}', ${2:data}, ${3:3600});
#

snippet yprof
	Yii::beginProfile('${1:}');${2}
	Yii::endProfile('$1');
#

snippet yexit
	Yii::app()->end();${1}
#

snippet yend
	Yii::app()->end();${1}
#

snippet yus
	Yii::app()->user${1}
#

snippet yuser
	Yii::app()->user${1}
#

snippet yacc
	Yii::app()->user->account${1}
#

snippet yscript
	<script>
	<?php ob_start();?>
	${1://script here}
	<?php csScript(ob_get_clean(), 'ready'); ?>
	</script>
#
<<<<<<< HEAD

=======
>>>>>>> 635393643fdb05f3f38f2c02ac83dfcb7d992378
snippet ytransaction
	// <transaction>
	$dbConn = Yii::app()->db;

	if ($dbConn->getCurrentTransaction()) {
		$transaction = null;
	} else {
		$transaction = $dbConn->beginTransaction();
	}

	try {
		${1}

		if ($transaction) {
			$transaction->commit();
		}

	} catch (Exception $e) {
		if ($transaction) {
			$transaction->rollback();
		}

		throw $e;
	}
	// </transaction>
#

snippet yhtmlform
	<div id="<?php echo $formContainerId = uniqid('FormContainer'); ?>" class="form">
	<?php echo $form->renderBegin(); ?>
	<?php $formWidget = $form->activeFormWidget; ?>
		<?php
		echo Html::errorSummary($form->getModel(), null, null, array('class' => 'alert alert-danger'));
		echo Html::flashMessages();
		?>
		${2}
		<div>
		<?php
		$form->buttons['${1:submitButton}']->class = 'btn btn-primary';
		echo $form->buttons['$1']->render();
		?>
		</div>
	<?php echo $form->renderEnd(); ?>
	</div>

	<script>
	<?php ob_start();?>
	ajaxFormInit(<?php echo CJavaScript::encode(array(
		'formContainerId'    => $formContainerId,
		'modelClass'         => get_class($form->getModel()),
		'multiSubmitButtons' => true,
		'onSuccess'          => new JavaScriptFunction(array('form', 'data'), '
			// console.log("form submit OK.");
		')
	)); ?>);
	<?php csScript(ob_get_clean(), 'ready'); ?>
	</script>
#

snippet ytextfield
	<div class="row">
		<div class="col-sm-4 form-group <?php if ($form->model->hasErrors('${1:varname}')) { echo 'has-error'; } ?>">
			<?php echo $formWidget->labelEx($form->model, '$1', array('class' => 'control-label')); ?>
			<?php echo $formWidget->textField($form->model, '$1', array(
				'class' => 'form-control',
				'placeholder' => '${2:field placeholder}'
			)); ?>
			<div class="help-block">
				<?php echo $formWidget->error($form->model, '$1', array('class' => 'text text-danger')); ?>
			</div>
		</div>
	</div>
#

snippet ycheckbox
	<div class="form-group <?php if ($model->hasErrors('${1:field}')) { echo 'has-error'; } ?>">
		<?php echo $form->labelEx($model, '$1', array('class' => 'col-lg-2 control-label')); ?>
		<div class="col-lg-6">
			<div class="checkbox">
				<label>
				<?php
				echo $form->checkBox(
					$model,
					'$1',
					array(
						'value'        => 'Y',
						'uncheckValue' => 'N',
					)
				);
				?> &nbsp; </label>
			</div>
		</div>
		<?php echo $form->error($model, '$1', array('class' => 'text text-danger')); ?>
	</div>
#

snippet ydropdown
	<div class="form-group <?php if ($model->hasErrors('${1:varname}')) { echo 'has-error'; } ?>">
		<?php echo $form->labelEx($model, '$1', array('class' => 'col-lg-2 control-label')); ?>
		<div class="col-lg-6">
		<?php
			$dropDownList = array(
				'event_list_paginated' => t('Lista de evenimente paginată'),
				'first_event'          => t('Primul eveniment'),
			);
			echo $form->dropDownList(
				$model,
				'$1',
				$dropDownList,
				array(
					//'prompt' => t('Prompt'),
					'empty' => t('Alege o valoare'),
					'class' => 'form-control'
				)
			);
		?>
		</div>

		<div class="help-block">
			<?php echo $form->error($model, '$1', array('class' => 'text text-danger')); ?>
		</div>
	</div>
#

snippet yform
	$model = new DemoModel();

	$form = new CForm(array(
		'id' => 'theForm',

		'elements' => array(
			'var' => array('type' => 'text',),
			'var' => array('type' => 'dropdownlist',),
		),

		'buttons' => array(
			'submit' => array(
				'type'  => 'htmlSubmit',
				'label' => 'Trimite',
			)
		),
	), $model);

	if ($form->submitted()) {
		$form->loadData();
		$form->validate();
	}

	$this->renderPartial('index', array(
		'form' => $form,
	));
#
snippet yv exist
	array(
		'${1:field}',
		'exist',
		'className'     => '${2:ModelName}', // numele modelului de validat. Order, Booking, etc
		'attributeName' => '${3:id}',		 // numele campului de verificat. de obicei este id
		'allowEmpty'    => false, // permite sa fie empty campul
		'skipOnError'   => true,  // nu se aplica validatorul daca exista deja o eroare pe acest camp. de ex exista valdatorul de "integer" care se aplica inainte, si da eroare, caz in care nu mai aplic validatorul curent
		'on'            => array('insert', 'insert_admin'), // scenariile permise
		'except'        => array('testcode', 'search'),		// scenariile excluse
	),
#
snippet yfilter filter
	public function filter${1:FilterName}($filterChain)
	{
		${2:codehere}
		$filterChain->run();
	}
#
snippet yca user->checkAccess
	Yii::app()->user->checkAccess('${1:rule}')
#
#
# Bootsrap #################################################
#
#
snippet bootstrap form-inline
	<form class="navbar-form navbar-left" role="search">
	<div class="form-group">
		<input type="text" class="form-control" placeholder="Search">
	</div>
	<button type="submit" class="btn btn-default">Submit</button>
	</form>
#

snippet bootstrap form-input(group)
	<div class="form-group">
		<label for="exampleInput">InputLabel</label>
		<input type="text" class="form-control" id="exampleInputEmail1" placeholder="Email">
		<p class="help-block">Example block-level help text here.</p>
	</div>
#

snippet bootstrap form-input(checkbox)
	<div class="checkbox">
		<label>
		<input type="checkbox"> Check me out
		</label>
	</div>
#

snippet bootstrap button-a
	<a class="btn btn-default" href="#" role="button">Link</a>
#

snippet bootstrap button-button
	<button class="btn btn-default" type="submit">Button</button>
#

snippet bootstrap button-input-b
	<input class="btn btn-default" type="button" value="Input">
#

snippet bootstrap button-submit
	<input class="btn btn-default" type="submit" value="Submit">
#

snippet bootstrap glyphicon-span
	<span class="glyphicon glyphicon-${1:plus|minus|search}"></span>
#

snippet bootstrap input-group
	<div class="input-group">
		<input type="text" class="form-control" name="${1:name}" value="${2:value}" />
		<span class="input-group-addon">%</span>
	</div>
#

snippet bootstrap input-group-button
	<div class="input-group">
		<input type="text" class="form-control" placeholder="Search for...">
		<span class="input-group-btn">
			<button class="btn btn-default" type="button">Go!</button>
		</span>
	</div>
#

snippet bootstrap modal
	<!-- Button trigger modal -->
	<button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#${1:myModal}">
	Launch demo modal
	</button>

	<!-- Modal -->
	<div class="modal fade" id="$1" tabindex="-1" role="dialog" aria-labelledby="$1Label">
	<div class="modal-dialog ${2:modal-lg|modal-sm}" role="document">
		<div class="modal-content">
		<div class="modal-header">
			<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
			<h4 class="modal-title" id="$1Label">Modal title</h4>
		</div>
		<div class="modal-body">
			...
		</div>
		<div class="modal-footer">
			<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
			<button type="button" class="btn btn-primary">Save changes</button>
		</div>
		</div>
	</div>
	</div>
#

snippet bootstrap tab
	<!-- Nav tabs -->
	<ul class="nav nav-tabs" role="tablist">
		<li role="presentation" class="active"><a href="#tab1" role="tab" data-toggle="tab">tab 1</a></li>
		<li role="presentation"><a href="#tab2" role="tab" data-toggle="tab">tab 2</a></li>
	</ul>

	<!-- Tab panes -->
	<div class="tab-content">
		<div role="tabpanel" class="tab-pane active" id="tab1">...</div>
		<div role="tabpanel" class="tab-pane" id="tab2">...</div>
	</div>
#

snippet dom Document
	$doc = new DomDocument('1.0', 'utf-8');
	$doc->substituteEntities = false;
	$doc->formatOutput = true;

	$oldSetting = libxml_use_internal_errors(true);
	libxml_clear_errors();
	$doc->loadHTML($response);
	//$doc->loadXML($response);
	libxml_clear_errors();
	libxml_use_internal_errors($oldSetting);
#

snippet dom xpath nodes
	$xpath = new DOMXPath($doc);
	$res = $xpath->query('//*[@id="${1}"]');
#

snippet dom xpath value
	$xpath = new DOMXPath($doc);
	$value = $xpath->evaluate('string(//*[@id="${1}"])');

##########
# Laravel.
# prefixate cu "l"
##########

# laravel validator
snippet lval validator
	$validator = Validator::make($request->all(), [
		'number'          => 'required|string|max:255',
		'range'           => 'required|in:'. implode(',', []),
		'line'            => 'required|array',
		'line.*.linedate' => 'sometimes|date',
	], [
		'lineine.required'        => __('Please add a line'),
		'lineine.array'           => __('Line must be an array'),
		'lineine.*.linedate.date' => __('Date incorect'),
	]);

	if ($validator->passes()) {
		// ...
	}

