# exemple https://github.com/honza/vim-snippets/blob/master/snippets/php.snippets

# phpl phpline
snippet php
	<?php ${1} ?>
# php start
snippet phps
	<?php
# phpe
	?>
# php invnverted
snippet phpi
	?>${1}<?php
# php
snippet phpe
	<?php echo ${1} ?>
#
snippet php=
	<?= ${1} ?>
#
snippet php=h
	<?= htmlspecialchars(${1}) ?>
#
snippet phpeh
	<?php echo htmlspecialchars(${1}); ?>
#
snippet php=hh
	<?= h(${1}) ?>
#
snippet phpehh
	<?php echo h(${1}); ?>
#
snippet php=j
	<?= json_encode(${1}); ?>
#
snippet phpej
	<?php echo json_encode(${1}); ?>
#
snippet epre
	echo '<pre>';
	${1}
	echo '</pre>';
#
snippet if
	if (${1}) {
		${2}
	}
#
snippet ife
	if (${1}) {
		${2}
	} else {
		${3}
	}
#
snippet iis
	if (isset(${1})) {
		${2}
	}
#
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
#
snippet ehr
	echo PHP_SAPI == 'cli' ? "\n----------\n" : '<hr />';
#
snippet ebr
	echo PHP_SAPI == 'cli' ? PHP_EOL : '<br />';
#

# #########
# debugging
# #########
snippet db
	debug(${1});${2}
#
snippet dbr
	debug_request();${2}
#
snippet dbb
	/* debug backtrace */ $__log = []; foreach(debug_backtrace() as $_db) { $__log[] = $_db['file']. ':'. $_db['line']. (! empty($_db['class']) ? ' '. $_db['class']. '::'. $_db['function']. '()' : (! empty($_db['function']) ? ' '. $_db['function']. '()' : '')); } echo PHP_SAPI == 'cli' ? '' : '<pre>'; print_r($__log); echo PHP_SAPI == 'cli' ? '' : '<pre>'; unset($__log);
	${1}
#
snippet dbl
	debug('line '. __LINE__. "<br/>\n");
#
snippet dbfl
	var_dump(__FILE__. ':'. __LINE__. "<br/>\n");
#
snippet dl
	echo PHP_EOL, __FILE__, ':', __LINE__, PHP_EOL; exit;
#
snippet dbmemory
	echo '[ '. 'memory '. round(memory_get_usage() / (1024 * 1024), 2). '/'. round(memory_get_peak_usage() / (1024 * 1024), 2). ' ] ', __FILE__. ':'. __LINE__, PHP_SAPI == 'cli' ? PHP_EOL : '<br />';
#
snippet dbtime
	if (isset($GLOBALS['_profile_time'])) { echo PHP_SAPI == 'cli' ? PHP_EOL : '<br />', '[ time: ', ((microtime(true) - $GLOBALS['_profile_time']) * 1000), 'ms ] ', __FILE__, ':', __LINE__, PHP_SAPI == 'cli' ? PHP_EOL : '<br />'; } $GLOBALS['_profile_time'] = microtime(true);
#
snippet vd
	var_dump(${1});${2}
#

snippet gcm
	get_class_methods(${1})
#

snippet gif
	get_included_files()
#

snippet fga
	func_get_args()
#

snippet vdx
	var_dump(${1});exit;
#
snippet =>
	'${1}' => ${2},
#

snippet try
	try {
		${1}
	} catch (${2}Exception $exception) {
		${3}
		throw $exception;
	}
#


snippet ob
	ob_start();
	?>
	${1}
	<?php
	$content = ob_get_clean();

# snippet pentru smarty
snippet {php
	{php}?>
	${1}
	<?php{/php}
#

# echo sprintf('ceva %s\n', $altceva);
snippet espf
	echo sprintf('${1} %s', ${2});${3}
#

snippet spf
	sprintf('${1} %s', ${2})${3}
#
snippet strtr
	strtr('
		{{${1:var}}}
	', [
		'{{$1}}' => $2
	]);

# Tertiary conditional
snippet =?:
	$${1:foo} = ${2:true} ? ${3:a} : ${4};
snippet ?:
	${1:true} ? ${2:a} : ${3}
#
snippet fv int
	filter_var(get_script_param('${1:var}'), FILTER_VALIDATE_INT, ['options' => ['min_range' => '1', 'default' => null]]);
snippet fv email
	filter_var(get_script_param('${1:var}'), FILTER_VALIDATE_EMAIL);
snippet fv scalar
	filter_var(get_script_param('page'), FILTER_DEFAULT, array('flags' => FILTER_REQUIRE_SCALAR | FILTER_NULL_ON_FAILURE));
snippet fv array
	filter_var(get_script_param('page'), FILTER_DEFAULT, array('flags' => FILTER_REQUIRE_ARRAY | FILTER_NULL_ON_FAILURE));

snippet armap
	array_map(function($item) {
		${2:// callback}
		return $item;
	}, ${1:$array})
snippet arred
	array_reduce(${1:$array}, function($carry, $item) {
		${2:// callback}
		return $carry;
	}, [])
snippet arwalk
	array_walk(${1:array}, function(&$item, $key) {
	})
snippet imp
	implode(${1:', '}, ${2:$array})
snippet ake
	array_key_exists(${1:'key'}, ${2:$array})
snippet in
	is_null(${1})
snippet em
	empty(${1})
snippet uid
	uniqid('${1}-')

snippet C
	$_COOKIE['${1:variable}']${2}
snippet E
	$_ENV['${1:variable}']${2}
snippet F
	$_FILES['${1:variable}']${2}
snippet G
	$_GET['${1:variable}']${2}
snippet P
	$_POST['${1:variable}']${2}
snippet R
	$_REQUEST['${1:variable}']${2}
snippet S
	$_SERVER['${1:variable}']${2}
snippet SS
	$_SESSION['${1:variable}']${2}
#

snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
#

snippet foreach
	foreach ($${1:variable} as $${2:value}) {
		${3:// code...}
	}
snippet phpforeach
	<?php foreach ($${1:variable} as $${2:value}) { ?>
		${3:<!-- html... -->}
	<?php } ?>
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${4:// code...}
	}
snippet phpforeachk
	<?php foreach ($${1:variable} as $${2:key} => $${3:value}) { ?>
		${4:<!-- html... -->}
	<?php } ?>
#
snippet nl
	PHP_EOL
#
snippet ret
	return ${1}
#
snippet rett
	return true;
#
snippet retf
	return false;
#
snippet retn
	return null;
#
snippet reta
	return [${1}];

snippet headerutf8
	header('Content-Type: text/html; charset=utf-8');
snippet headerjson
	header('Content-Type: application/json; charset=utf-8');
snippet header100
	header('HTTP/1.1 100 Continue', true, 100);
snippet header101
	header('HTTP/1.1 101 Switching Protocols', true, 101);
snippet header200
	header('HTTP/1.1 200 OK', true, 200);
snippet header201
	header('HTTP/1.1 201 Created', true, 201);
snippet header202
	header('HTTP/1.1 202 Accepted', true, 202);
snippet header203
	header('HTTP/1.1 203 Non-Authoritative Information', true, 203);
snippet header204
	header('HTTP/1.1 204 No Content', true, 204);
snippet header205
	header('HTTP/1.1 205 Reset Content', true, 205);
snippet header206
	header('HTTP/1.1 206 Partial Content', true, 206);
snippet header300
	header('HTTP/1.1 300 Multiple Choices', true, 300);
snippet header301
	header('HTTP/1.1 301 Moved Permanently', true, 301);
	header('Location: '. ${1:$url});
snippet header302
	header('HTTP/1.1 302 Moved Temporarily', true, 302);
snippet header303
	header('HTTP/1.1 303 See Other', true, 303);
snippet header304
	header('HTTP/1.1 304 Not Modified', true, 304);
snippet header305
	header('HTTP/1.1 305 Use Proxy', true, 305);
snippet header400
	header('HTTP/1.1 400 Bad Request', true, 400);
snippet header401
	header('HTTP/1.1 401 Unauthorized', true, 401);
snippet header402
	header('HTTP/1.1 402 Payment Required', true, 402);
snippet header403
	header('HTTP/1.1 403 Forbidden', true, 403);
snippet header404
	header('HTTP/1.1 404 Not Found', true, 404);
snippet header405
	header('HTTP/1.1 405 Method Not Allowed', true, 405);
snippet header406
	header('HTTP/1.1 406 Not Acceptable', true, 406);
snippet header407
	header('HTTP/1.1 407 Proxy Authentication Required', true, 407);
snippet header408
	header('HTTP/1.1 408 Request Time-out', true, 408);
snippet header409
	header('HTTP/1.1 409 Conflict', true, 409);
snippet header410
	header('HTTP/1.1 410 Gone', true, 410);
snippet header411
	header('HTTP/1.1 411 Length Required', true, 411);
snippet header412
	header('HTTP/1.1 412 Precondition Failed', true, 412);
snippet header413
	header('HTTP/1.1 413 Request Entity Too Large', true, 413);
snippet header414
	header('HTTP/1.1 414 Request-URI Too Large', true, 414);
snippet header415
	header('HTTP/1.1 415 Unsupported Media Type', true, 415);
snippet header500
	header('HTTP/1.1 500 Internal Server Error', true, 500);
snippet header501
	header('HTTP/1.1 501 Not Implemented', true, 501);
snippet header502
	header('HTTP/1.1 502 Bad Gateway', true, 502);
snippet header503
	header('HTTP/1.1 503 Service Unavailable', true, 503);
snippet header504
	header('HTTP/1.1 504 Gateway Time-out', true, 504);
snippet header505
	header('HTTP/1.1 505 HTTP Version not supported', true, 505);
#
# Start Docblock
snippet /*
	/**
	 * ${0}
	 */

snippet dom Document
	$doc = new DomDocument('1.0', 'utf-8');
	$doc->substituteEntities = false;
	$doc->formatOutput = true;

	$oldSetting = libxml_use_internal_errors(true);
	libxml_clear_errors();
	$doc->loadHTML($response);
	//$doc->loadXML($response);
	libxml_clear_errors();
	libxml_use_internal_errors($oldSetting);
#

snippet dom xpath nodes
	$xpath = new DOMXPath($doc);
	$res = $xpath->query('//*[@id="${1}"]');
#

snippet dom xpath value
	$xpath = new DOMXPath($doc);
	$value = $xpath->evaluate('string(//*[@id="${1}"])');


# Docblock

# Class - post doc
snippet doc_p
	/**
	 * @property ${1:type} 
	 */
	
