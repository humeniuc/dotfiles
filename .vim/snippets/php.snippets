# phpl phpline
snippet php
	<?php ${1} ?>
#
snippet phpe
	<?php echo ${1} ?>
#
snippet phpeh
	<?php echo htmlspecialchars(${1}); ?>
#
snippet phpehh
	<?php echo h(${1}); ?>
#
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
#
# debug
snippet db
	debug(${1});${2}
#
snippet dbr
	debug_request();${2}
#
snippet dbl
	debug('line '. __LINE__. "<br/>\n");
#
snippet dbfl
	var_dump(__FILE__. ' #'. __LINE__. "<br/>\n");
#
snippet dl
	echo PHP_EOL, __file__, ' #', __line__, PHP_EOL; exit;
#
snippet vd
	var_dump(${1});${2}
#
snippet gcm
	get_class_methods()
#
snippet gif
	get_included_files()
#
snippet fga
	func_get_args()
#
snippet vdx
	var_dump(${1});exit;
#
snippet try
	try {
		${1}
	} catch (${2}Exception $exception) {
		${3}
		throw $exception;
	}
#
# acolade
snippet {
	{
		${1}
	}
#
snippet ['
	['${1}']${2}
#
snippet [
	[${1}]${2}
#
snippet ob
	ob_start();
	?>
	${1}
	<?php
	$content = ob_get_clean();

# snippet pentru smarty
snippet {php
	{php}?>
	${1}
	<?php{/php}
#
# echo sprintf("ceva %s\n", $altceva);
snippet ecspf
	echo sprintf("${1}\n", ${2});${3}
#


# Tertiary conditional
snippet =?:
	$${1:foo} = ${2:true} ? ${3:a} : ${4};
snippet ?:
	${1:true} ? ${2:a} : ${3}
#

snippet C
	$_COOKIE['${1:variable}']${2}
snippet E
	$_ENV['${1:variable}']${2}
snippet F
	$_FILES['${1:variable}']${2}
snippet G
	$_GET['${1:variable}']${2}
snippet P
	$_POST['${1:variable}']${2}
snippet R
	$_REQUEST['${1:variable}']${2}
snippet S
	$_SERVER['${1:variable}']${2}
snippet SS
	$_SESSION['${1:variable}']${2}
#
snippet armap
	array_map(${1:'callback'}, ${2:$array})
snippet imp
	implode(${1:', '}, ${2:$array})
snippet ark
	array_key_exists(${1:'key'}, ${2:$array})
#
#
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:value}) {
		${3:// code...}
	}
snippet foreachil
	<?php foreach ($${1:variable} as $${2:value}) { ?>
		${3:<!-- html... -->}
	<?php } ?>
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${4:// code...}
	}
snippet foreachkil
	<?php foreach ($${1:variable} as $${2:key} => $${3:value}) { ?>
		${4:<!-- html... -->}
	<?php } ?>
#
snippet nl
	PHP_EOL
#
snippet ret
	return
#
snippet rett
	return true;
#
snippet retf
	return false;
#
snippet retn
	return null;
#
snippet reta
	return array(${1});

snippet header00
	header('HTTP/1.1 100 Continue', true, 100);
snippet header101
	header('HTTP/1.1 101 Switching Protocols', true, 101);
snippet header200
	header('HTTP/1.1 200 OK', true, 200);
snippet header201
	header('HTTP/1.1 201 Created', true, 201);
snippet header202
	header('HTTP/1.1 202 Accepted', true, 202);
snippet header203
	header('HTTP/1.1 203 Non-Authoritative Information', true, 203);
snippet header204
	header('HTTP/1.1 204 No Content', true, 204);
snippet header205
	header('HTTP/1.1 205 Reset Content', true, 205);
snippet header206
	header('HTTP/1.1 206 Partial Content', true, 206);
snippet header300
	header('HTTP/1.1 300 Multiple Choices', true, 300);
snippet header301
	header('HTTP/1.1 301 Moved Permanently', true, 301);
	header('Location: '. ${1:$url});
snippet header302
	header('HTTP/1.1 302 Moved Temporarily', true, 302);
snippet header303
	header('HTTP/1.1 303 See Other', true, 303);
snippet header304
	header('HTTP/1.1 304 Not Modified', true, 304);
snippet header305
	header('HTTP/1.1 305 Use Proxy', true, 305);
snippet header400
	header('HTTP/1.1 400 Bad Request', true, 400);
snippet header401
	header('HTTP/1.1 401 Unauthorized', true, 401);
snippet header402
	header('HTTP/1.1 402 Payment Required', true, 402);
snippet header403
	header('HTTP/1.1 403 Forbidden', true, 403);
snippet header404
	header('HTTP/1.1 404 Not Found', true, 404);
snippet header405
	header('HTTP/1.1 405 Method Not Allowed', true, 405);
snippet header406
	header('HTTP/1.1 406 Not Acceptable', true, 406);
snippet header407
	header('HTTP/1.1 407 Proxy Authentication Required', true, 407);
snippet header408
	header('HTTP/1.1 408 Request Time-out', true, 408);
snippet header409
	header('HTTP/1.1 409 Conflict', true, 409);
snippet header410
	header('HTTP/1.1 410 Gone', true, 410);
snippet header411
	header('HTTP/1.1 411 Length Required', true, 411);
snippet header412
	header('HTTP/1.1 412 Precondition Failed', true, 412);
snippet header413
	header('HTTP/1.1 413 Request Entity Too Large', true, 413);
snippet header414
	header('HTTP/1.1 414 Request-URI Too Large', true, 414);
snippet header415
	header('HTTP/1.1 415 Unsupported Media Type', true, 415);
snippet header500
	header('HTTP/1.1 500 Internal Server Error', true, 500);
snippet header501
	header('HTTP/1.1 501 Not Implemented', true, 501);
snippet header502
	header('HTTP/1.1 502 Bad Gateway', true, 502);
snippet header503
	header('HTTP/1.1 503 Service Unavailable', true, 503);
snippet header504
	header('HTTP/1.1 504 Gateway Time-out', true, 504);
snippet header505
	header('HTTP/1.1 505 HTTP Version not supported', true, 505);

##########
#YII
##########
#
#yii.app
snippet yiia
	Yii::app()${1}
#
snippet yiiapp
	Yii::app()${1}
#
#yii.trace
snippet yiitr
	Yii::trace(${1:message}, ${2:'category'});${3}
#
#yii.log
snippet yiilog
	Yii::log(${1:message}, ${2:level}, ${3:category});${4}
#
#yii.request
snippet yiireq Yii::app()->request
	Yii::app()->request${1}
#
#yii.request.post
snippet yiireq Yii::app()->request->getPost()
	Yii::app()->request->getPost(${1})${2}
#
#yii.request.param
snippet yiireq Yii::app()->request->getParam()
	Yii::app()->request->getParam(${1})${2}
#
#yii.request.query
snippet yiireq Yii::app()->request->getQuery()
	Yii::app()->request->getQuery(${1})${2}
#
#yii.request.ip
snippet yiireq Yii::app()->request->getUserHostAddress()
	Yii::app()->request->getUserHostAddress()${1}
#
snippet yiireq Yii::app()->request->cookies[]
	Yii::app()->request->cookies['${1}']
#
snippet yiireq Yii::app()->request->getIsPostRequest
	Yii::app()->request->getIsPostRequest()
#
#
snippet yiimf
	model()->findByPk(${1|pk})
#
#yii.findByAttributes
snippet yiimfa
	model()->findByAttributes(array('${1:key}' => ${2:value}))${3}
#
snippet yiip
	Yii::app()->params['${1}']${2}
#
snippet yiiflash setFlash
	Yii::app()->user->setFlash('success', ${1});${2}
#
snippet yiiflash addFlash
	Yii::app()->user->addFlash('success',${1});${2}
#
snippet yiistate setState
	Yii::app()->user->setState('${1}', ${2});
#
snippet yiistate getState
	Yii::app()->user->getState('${1}');
#
snippet yiicache Yii::app()->cache->get
	Yii::app()->cache->get('${1:key}');
#
snippet yiicache Yii::app()->cache->set
	Yii::app()->cache->set('${1:key}', ${2:data}, ${3:3600});
#
snippet yiiprof
	Yii::beginProfile('${1:}');${2}
	Yii::endProfile('$1');
#
snippet yiiexit
	Yii::app()->end();${1}
#
snippet yiiend
	Yii::app()->end();${1}
#
snippet yiius
	Yii::app()->user${1}
#
snippet yiiuser
	Yii::app()->user${1}
#
snippet yiiacc
	Yii::app()->user->account${1}
#
snippet yiiscript
	<script>
	<?php ob_start();?>
	${1://script here}
	<?php csScript(ob_get_clean(), 'ready'); ?>
	</script>
snippet yiitransaction
	// <transaction>
	$dbConn = Yii::app()->db;

	if ($dbConn->getCurrentTransaction()) {
		$transaction = null;
	} else {
		$transaction = $dbConn->beginTransaction();
	}

	try {
		${1}

		if ($transaction) {
			$transaction->commit();
		}

	} catch (Exception $e) {
		if ($transaction) {
			$transaction->rollback();
		}

		throw $e;
	}
	// </transaction>
#
snippet yiiform
	<div id="<?php echo $formContainerId = uniqid('FormContainer'); ?>" class="form">
	<?php echo $form->renderBegin(); ?>
	<?php $formWidget = $form->activeFormWidget; ?>
		<?php
		echo Html::errorSummary($form->getModel(), null, null, array('class' => 'alert alert-danger'));
		echo Html::flashMessages();
		?>
		${2}
		<div>
		<?php
		$form->buttons['${1:submitButton}']->class = 'btn btn-primary';
		echo $form->buttons['$1']->render();
		?>
		</div>
	<?php echo $form->renderEnd(); ?>
	</div>

	<script>
	<?php ob_start();?>
	ajaxFormInit(<?php echo CJavaScript::encode(array(
		'formContainerId'    => $formContainerId,
		'modelClass'         => get_class($form->getModel()),
		'multiSubmitButtons' => true,
		'onSuccess'          => new JavaScriptFunction(array('form', 'data'), '
			// console.log("form submit OK.");
		')
	)); ?>);
	<?php csScript(ob_get_clean(), 'ready'); ?>
	</script>
#
snippet yiitextfield
	<div class="row">
		<div class="col-sm-4 form-group <?php if ($form->model->hasErrors('${1:varname}')) { echo 'has-error'; } ?>">
			<?php echo $formWidget->labelEx($form->model, '$1', array('class' => 'control-label')); ?>
			<?php echo $formWidget->textField($form->model, '$1', array(
				'class' => 'form-control',
				'placeholder' => '${2:field placeholder}'
			)); ?>
			<div class="help-block">
				<?php echo $formWidget->error($form->model, '$1', array('class' => 'text text-danger')); ?>
			</div>
		</div>
	</div>
#
#
#
snippet bootstrap form-inline
	<form class="navbar-form navbar-left" role="search">
	<div class="form-group">
		<input type="text" class="form-control" placeholder="Search">
	</div>
	<button type="submit" class="btn btn-default">Submit</button>
	</form>



